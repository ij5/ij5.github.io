[{"content":"개요 몇 달 전에 산 ESP32를 쓸 곳이 별로 없어서 계속 방치하던 중 재실 감지 센서 아이디어가 떠올랐다.\n원래 esp32를 재실감지용으로 사용하는 사람이 많아 ESPresense라는 굉장히 편리한 프로젝트가 있다. 이거 말고도 ESPHome이라는 프로젝트가 있는데, ESPHome은 좀 무거운 듯하고 와이파이 연결 에러가 자꾸 발생해서 그냥 ESPresense를 사용하기로 했다.\nESPresense 설치 설치 방법은 굉장히 간단하다. 그냥 ESPresense 공식 사이트에 접속하면 웹페이지 내에서 크롬 시리얼 포트를 통해 esp32에 프로그램을 설치할 수 있다. 설치 후 와이파이 세팅까지 끝내면 내부망으로 esp32 웹서버에 접속할 수 있다.\n문제 발생 생각해보니 esp32는 ble를 사용하여 스마트폰을 식별한다. 그런데 안드로이드는 아이폰과 다르게 ble로 식별할 수 없다. 따라서 별도의 앱을 설치해야 하는데, 이것때문에 빡쳐서 포기함\n","permalink":"https://blog.hee.blue/posts/embedded/esphome-presence/","summary":"개요 몇 달 전에 산 ESP32를 쓸 곳이 별로 없어서 계속 방치하던 중 재실 감지 센서 아이디어가 떠올랐다.\n원래 esp32를 재실감지용으로 사용하는 사람이 많아 ESPresense라는 굉장히 편리한 프로젝트가 있다. 이거 말고도 ESPHome이라는 프로젝트가 있는데, ESPHome은 좀 무거운 듯하고 와이파이 연결 에러가 자꾸 발생해서 그냥 ESPresense를 사용하기로 했다.\nESPresense 설치 설치 방법은 굉장히 간단하다. 그냥 ESPresense 공식 사이트에 접속하면 웹페이지 내에서 크롬 시리얼 포트를 통해 esp32에 프로그램을 설치할 수 있다. 설치 후 와이파이 세팅까지 끝내면 내부망으로 esp32 웹서버에 접속할 수 있다.","title":"ESP32를 이용한 재실감지 센서 만들기"},{"content":"개요 BLE 라이브러리에서 소개했던 라이브러리 중, react-native-ble-plx를 어떻게 사용하는지에 대해 기록을 남긴다.\n패키지 설치 yarn add react-native-ble-plx yarn 또는 npm을 사용하여 먼저 설치를 진행한다. 만약 npx expo install react-native-ble-plx 명령어를 사용하여 설치를 진행한다면, app.json 또는 app.config.js의 플러그인 부분에 라이브러리가 자동으로 추가되는 듯하다.\nyarn expo prebuild expo의 prebuild 명령어를 이용해 네이티브 파일을 생성한다.\n{ \u0026#34;expo\u0026#34;: { \u0026#34;plugins\u0026#34;: [\u0026#34;react-native-ble-plx\u0026#34;] } } 최상위 폴더의 app.json에 라이브러리를 추가하거나, 추가가 되어있는지 확인한다.\nyarn android 안드로이드용으로 빌드 시 위 명령어를 입력한다. ios 빌드는 맥이 없어서 실행을 못 해봤다. ㅠ\nBLE 라이브러리 정리에서도 설명했지만, neverForLocation 권한 플래그가 라이브러리 자체에서 포함됐기 때문에 AndroidManifest.xml 파일의 BLUETOOTH_SCAN 부분에 다음과 같이 tools:remove 속성을 추가해야 한다.\n\u0026lt;uses-permission android:name=\u0026#34;android.permission.BLUETOOTH_SCAN\u0026#34; tools:remove=\u0026#34;android:usesPermissionFlags\u0026#34;/\u0026gt; 그리고 AndroidManifest.xml 최상단 \u0026lt;manifest\u0026gt; 태그에 다음과 같이 xmlns를 추가해줘야 빌드 시 오류가 나지 않는다.\n\u0026lt;manifest xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34;\u0026gt; 구현 코드 인스턴스 생성 다음과 같이 먼저 BleManager 인스턴스를 생성한다.\nimport { BleManager } from \u0026#39;react-native-ble-plx\u0026#39; export const manager = new BleManager() 반드시 하나의 인스턴스만 허용된다고 한다. 전역변수로 선언하면 되는 듯하다.\n인스턴스를 삭제하려면 manager.destroy() 함수를 활용하면 된다.\n권한 부여 (Android) import { PermissionsAndroid, Platform, ToastAndroid } from \u0026#34;react-native\u0026#34;; import { BleManager, Device, ScanMode } from \u0026#34;react-native-ble-plx\u0026#34;; const requestBluetoothPermission = async () =\u0026gt; { if (Platform.OS === \u0026#34;ios\u0026#34;) { return true; // iOS는 권한 부여 코드가 따로 필요하지 않음 } if ( Platform.OS === \u0026#34;android\u0026#34; \u0026amp;\u0026amp; PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION ) { const apiLevel = parseInt(Platform.Version.toString(), 10); if (apiLevel \u0026lt; 31) { const granted = await PermissionsAndroid.request( PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION ); return granted === PermissionsAndroid.RESULTS.GRANTED; } if ( PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN \u0026amp;\u0026amp; PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT ) { const result = await PermissionsAndroid.requestMultiple([ PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN, PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT, PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION, ]); return ( result[\u0026#34;android.permission.BLUETOOTH_CONNECT\u0026#34;] === PermissionsAndroid.RESULTS.GRANTED \u0026amp;\u0026amp; result[\u0026#34;android.permission.BLUETOOTH_SCAN\u0026#34;] === PermissionsAndroid.RESULTS.GRANTED \u0026amp;\u0026amp; result[\u0026#34;android.permission.ACCESS_FINE_LOCATION\u0026#34;] === PermissionsAndroid.RESULTS.GRANTED ); // 모든 권한이 허용되었으면 true를 반환 } ToastAndroid.show(\u0026#34;권한을 모두 허용해주세요.\u0026#34;, 3000); // 권한 허용이 안 되어있으면 toast 메시지 출력 return false; } }; iOS는 따로 권한 요청 코드가 필요 없다.\n기기 검색 권한 요청이 성공하면 디바이스를 검색할 수 있다. 다음은 검색된 모든 기기의 이름을 출력하는 코드이다.\nbleManager.startDeviceScan(null, { scanMode: ScanMode.Balanced }, (error, device) =\u0026gt; { if (error) { console.log(error); return error; } if (!device) return; console.log(device.name); }) 아까 생성한 bleManager 인스턴스의 startDeviceScan 함수로 스캔을 시작한다.\n첫 번째 인자에 uuid를 입력하면 검색되는 기기를 해당 uuid에 대해 필터링할 수 있다. null을 입력하면 따로 필터링 과정을 거치지 않고 모든 기기가 검색된다.\n인자로 넘긴 콜백 함수는 어떤 디바이스를 찾았을 때 호출된다.\n끝 네이티브(Kotlin, Swift)에 비해 RN은 블루투스 등을 제어하기가 까다로운데, 이 라이브러리는 iOS와 안드로이드를 동시에 지원해서 생산성이 뛰어나다.\n또한 코드 몇 줄로 백그라운드에서 실행이 가능한 것으로 보인다.\n","permalink":"https://blog.hee.blue/posts/react-native/react-native-ble-plx-usage/","summary":"개요 BLE 라이브러리에서 소개했던 라이브러리 중, react-native-ble-plx를 어떻게 사용하는지에 대해 기록을 남긴다.\n패키지 설치 yarn add react-native-ble-plx yarn 또는 npm을 사용하여 먼저 설치를 진행한다. 만약 npx expo install react-native-ble-plx 명령어를 사용하여 설치를 진행한다면, app.json 또는 app.config.js의 플러그인 부분에 라이브러리가 자동으로 추가되는 듯하다.\nyarn expo prebuild expo의 prebuild 명령어를 이용해 네이티브 파일을 생성한다.\n{ \u0026#34;expo\u0026#34;: { \u0026#34;plugins\u0026#34;: [\u0026#34;react-native-ble-plx\u0026#34;] } } 최상위 폴더의 app.json에 라이브러리를 추가하거나, 추가가 되어있는지 확인한다.\nyarn android 안드로이드용으로 빌드 시 위 명령어를 입력한다.","title":"react-native-ble-plx 사용 방법"},{"content":"리액트 네이티브 BLE(Bluetooth Low Energy) 라이브러리가 여러 개가 있는데, 그 중 사용해본 라이브러리를 설명하겠다. 아래는 깃허브 스타 수를 기준으로 정렬하였다.\nreact-native-ble-plx 이 라이브러리는 크로스 플랫폼(Android, iOS)을 지원하여 개발자가 블루투스 서비스를 사용하기 쉽게 만들어 놓은 라이브러리다. 현재 깃허브 스타 수가 제일 많고, 기여가 활발한 편이다.\nexpo를 지원해서, expo install 커맨드로 설치하면 AndroidManifest.xml이나 build.gradle 등의 네이티브 파일을 수정하지 않아도 된다.\n다만 사용 중 모든 BLE 디바이스가 검색이 안되는 문제가 발생하여 대략 3일동안 삽질했는데, 아래 이슈를 보고 해결하였다.\n#1014\n안드로이드 13 이상에서는 neverForLocation(링크) 권한 플래그가 새로 생겼는데, 이 권한 플래를 android:usesPermissionFlags에 포함하면 일부 BLE 비콘이 검색 결과에서 필터링된다. 나는 android/app/src/AndroidManifest.xml 파일에 직접 플래그를 포함하지 않았지만, 라이브러리 자체에서 플래그를 포함했기 때문에 비콘이 검색 결과에 뜨지 않았던 것이다. 따라서 AndroidManifest.xml 파일의 권한 부분에 다음과 같이 tools:remove 속성을 추가해야 한다.\n\u0026lt;uses-permission android:name=\u0026#34;android.permission.BLUETOOTH_SCAN\u0026#34; tools:remove=\u0026#34;android:usesPermissionFlags\u0026#34; /\u0026gt; react-native-ble-manager react-native-ble-plx와 비슷하지만, BLE 스캔 방식이 더 불편하다고 느꼈다. 예를 들어 디바이스 스캔 후 결과값을 출력하려면 RN의 네이티브 모듈에 이벤트 리스너를 추가해야 한다.\nreact-native-beacons-manager 기여가 거의 없는 수준이라 추천하지는 않는다.\n","permalink":"https://blog.hee.blue/posts/react-native/ble/","summary":"리액트 네이티브 BLE(Bluetooth Low Energy) 라이브러리가 여러 개가 있는데, 그 중 사용해본 라이브러리를 설명하겠다. 아래는 깃허브 스타 수를 기준으로 정렬하였다.\nreact-native-ble-plx 이 라이브러리는 크로스 플랫폼(Android, iOS)을 지원하여 개발자가 블루투스 서비스를 사용하기 쉽게 만들어 놓은 라이브러리다. 현재 깃허브 스타 수가 제일 많고, 기여가 활발한 편이다.\nexpo를 지원해서, expo install 커맨드로 설치하면 AndroidManifest.xml이나 build.gradle 등의 네이티브 파일을 수정하지 않아도 된다.\n다만 사용 중 모든 BLE 디바이스가 검색이 안되는 문제가 발생하여 대략 3일동안 삽질했는데, 아래 이슈를 보고 해결하였다.","title":"React Native BLE 라이브러리 정리"}]