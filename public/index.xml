<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>J.log</title><link>https://blog.hee.blue/</link><description>Recent content on J.log</description><generator>Hugo -- 0.125.3</generator><language>ko-kr</language><lastBuildDate>Fri, 10 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.hee.blue/index.xml" rel="self" type="application/rss+xml"/><item><title>Efficient LLaMA3 Fine-Tuning with Unsloth</title><link>https://blog.hee.blue/posts/ai/unsloth-llama3-fine-tuning/</link><pubDate>Fri, 10 May 2024 00:00:00 +0000</pubDate><guid>https://blog.hee.blue/posts/ai/unsloth-llama3-fine-tuning/</guid><description>개요 글을 작성하는 현 시점 기준으로 약 2주 전 라마3가 발표되었다. 나는 새로운 pretrained LLM이 공개되었을 때 채팅 데이터를 학습시키지 않으면 입 안에 가시가 돋아 이번 기회에 라마3을 파인튜닝하자고 결심했다. 허깅페이스에 누군가 한국어 데이터셋에 맞춰 학습시켜놓은 라마3가 있었기 때문에 파인튜닝 시 기본 영어 모델보다 한국어 성능이 나을 것이라고 판단하여 이 모델을 베이스로 사용하기로 했다.
학습 전 준비물 개발 환경 (GPU 클라우드) RTX 4090 X 1 Ubuntu 22.04 PyTorch 2.2.0 CUDA 12.</description></item><item><title>react-native-ble-plx 사용 방법</title><link>https://blog.hee.blue/posts/react-native/react-native-ble-plx-usage/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.hee.blue/posts/react-native/react-native-ble-plx-usage/</guid><description>개요 BLE 라이브러리에서 소개했던 라이브러리 중, react-native-ble-plx를 어떻게 사용하는지에 대해 기록을 남긴다.
패키지 설치 yarn add react-native-ble-plx yarn 또는 npm을 사용하여 먼저 설치를 진행한다. 만약 npx expo install react-native-ble-plx 명령어를 사용하여 설치를 진행한다면, app.json 또는 app.config.js의 플러그인 부분에 라이브러리가 자동으로 추가되는 듯하다.
yarn expo prebuild expo의 prebuild 명령어를 이용해 네이티브 파일을 생성한다.
{ &amp;#34;expo&amp;#34;: { &amp;#34;plugins&amp;#34;: [&amp;#34;react-native-ble-plx&amp;#34;] } } 최상위 폴더의 app.json에 라이브러리를 추가하거나, 추가가 되어있는지 확인한다.
yarn android 안드로이드용으로 빌드 시 위 명령어를 입력한다.</description></item><item><title>ESP32를 이용한 재실감지 센서 만들기</title><link>https://blog.hee.blue/posts/embedded/esphome-presence/</link><pubDate>Mon, 29 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.hee.blue/posts/embedded/esphome-presence/</guid><description>개요 몇 달 전에 산 ESP32를 쓸 곳이 별로 없어서 계속 방치하던 중 재실 감지 센서 아이디어가 떠올랐다.
원래 esp32를 재실감지용으로 사용하는 사람이 많아 ESPresense라는 굉장히 편리한 프로젝트가 있다. 이거 말고도 ESPHome이라는 프로젝트가 있는데, ESPHome은 좀 무거운 듯하고 와이파이 연결 에러가 자꾸 발생해서 그냥 ESPresense를 사용하기로 했다.
ESPresense 설치 설치 방법은 굉장히 간단하다. 그냥 ESPresense 공식 사이트에 접속하면 웹페이지 내에서 크롬 시리얼 포트를 통해 esp32에 프로그램을 설치할 수 있다. 설치 후 와이파이 세팅까지 끝내면 내부망으로 esp32 웹서버에 접속할 수 있다.</description></item><item><title>React Native BLE 라이브러리 정리</title><link>https://blog.hee.blue/posts/react-native/ble/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://blog.hee.blue/posts/react-native/ble/</guid><description>리액트 네이티브 BLE(Bluetooth Low Energy) 라이브러리가 여러 개가 있는데, 그 중 사용해본 라이브러리를 설명하겠다. 아래는 깃허브 스타 수를 기준으로 정렬하였다.
react-native-ble-plx 이 라이브러리는 크로스 플랫폼(Android, iOS)을 지원하여 개발자가 블루투스 서비스를 사용하기 쉽게 만들어 놓은 라이브러리다. 현재 깃허브 스타 수가 제일 많고, 기여가 활발한 편이다.
expo를 지원해서, expo install 커맨드로 설치하면 AndroidManifest.xml이나 build.gradle 등의 네이티브 파일을 수정하지 않아도 된다.
다만 사용 중 모든 BLE 디바이스가 검색이 안되는 문제가 발생하여 대략 3일동안 삽질했는데, 아래 이슈를 보고 해결하였다.</description></item></channel></rss>